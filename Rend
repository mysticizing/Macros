const target = game.user.targets.first();
if(!target?.actor) return ui.notifications.info("no targets selected");
const test = new RegExp(/Obsidian Fragment \(([0-9]+)\)/)
const effect = target.actor.effects.find(e => test.test(e.name));
if(!effect) return;

const number = effect.name.match(/([0-9]+)/)[0];
const formula = `${number}d6`;
const roll = await new Roll(formula).evaluate();
const damage = roll.total;
await roll.toMessage({speaker: ChatMessage.getSpeaker({actor})});

const updates = {
  embedded: {ActiveEffect: {[effect.name]: warpgate.CONST.DELETE}},
  actor: getHP(damage, target.actor.system.attributes.hp)
};

await warpgate.mutate(target.document, updates, {}, {permanent: true});

// Calculate new hp values.
function getHP(amount, hp){
  const tmp = parseInt(hp.temp) || 0;
  const dt = Math.min(tmp, amount);
  const tmpMax = parseInt(hp.tempmax) || 0;
  const dh = Math.clamped(hp.value - (amount - dt), 0, hp.max + tmpMax);
  return {
    "system.attributes.hp.temp": tmp - dt,
    "system.attributes.hp.value": dh
  };
}
